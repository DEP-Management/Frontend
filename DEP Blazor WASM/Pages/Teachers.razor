@page "/undervisere"
@using DEP_Blazor_WASM.Entities.Models
@using DEP_Blazor_WASM.Services.Interfaces
@using System.Globalization
@inject IPersonService personService
@inject IDepartmentService departmentService
@inject ILocationService locationService
@inject IUserService userService

@attribute [Authorize(Roles =
    nameof(UserRole.Driftskoordinator) + "," +
    nameof(UserRole.Pædagogisk_konsulent) + "," +
    nameof(UserRole.Uddannelseschef) + "," +
    nameof(UserRole.Uddannelsesleder) + "," +
    nameof(UserRole.Administrator))]

<MudContainer Class="pa-0" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="8" md="9">
            <GenericDataTable Height="calc(100vh - 188px)" TItem="Person" Items="@filteredPersons" TableTitle="Undervisere" Filter="FilterFunc">
                <HeaderTemplate>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.Name)">Navn</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.Initials)">Initialer</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.Department?.Name!)">Afdeling</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.Location?.Name!)">Lokation</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.EndDate)">Slut dato</MudTableSortLabel></MudTh>
                    <MudTh Style="text-align:center; max-width: 75px" Class="px-0"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.CompletedModules)">Færdige moduler</MudTableSortLabel></MudTh>
                    <MudTh Style="text-align:center"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.SvuApplied)">SVU</MudTableSortLabel></MudTh>
                </HeaderTemplate>
                <RowTemplate Context="person">
                    <MudTd Style="max-width: 220px" Class="cursor-pointer truncate-text" title="@person.Name"
                    @onclick="@(() => NavigationManager.NavigateTo($"/undervisere/profil/{person.PersonId}"))">
                        @person.Name
                    </MudTd>
                    <MudTd>@person.Initials</MudTd>
                    <MudTd Style="max-width: 200px" Class="truncate-text" title="@person.Department?.Name">@person.Department?.Name</MudTd>
                    <MudTd>@person.Location?.Name</MudTd>
                    <MudTd Style="@person.EndDateStyle">
                        @person.EndDate.ToShortDateString()
                    </MudTd>
                    <MudTd Style="text-align:center; max-width: 30px">@person.CompletedModules</MudTd>
                    <MudTd Class="d-flex justify-center">
                        <MudCheckBox T="bool" Value="@person.SvuApplied" Disabled="true" />
                    </MudTd>
                </RowTemplate>
            </GenericDataTable>
        </MudItem>
        <MudItem xs="2" sm="3" md="3" Class="ps-1">
            <MudPaper Elevation="2" Class="pa-4">
                <FilterComponent ShowDepartmentFilter="true"
                                 ShowEducationalConsultantFilter="true"
                                 ShowOperationCoordinatorFilter="true"
                                 ShowLocationFilter="true"
                                 Departments="departments"
                                 Locations="locations"
                                 EducationalConsultants="users.Where(u => u.UserRole == UserRole.Pædagogisk_konsulent).ToList()"
                                 OperationCoordinators="users.Where(u => u.UserRole == UserRole.Driftskoordinator).ToList()"
                                 SelectedDepartmentsChanged="OnDepartmentsChanged"
                                 SelectedLocationsChanged="OnLocationsChanged"
                                 SelectedOperationCoordinatorsChanged="OnOperationCoordinatorsChanged"
                                 SelectedEducationalConsultantsChanged="OnEducationalConsultantsChanged"/>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    private List<Person> persons = new List<Person>();
    private List<Department> departments = new List<Department>();
    private List<Location> locations = new List<Location>();
    private List<User> users = new List<User>();

    // Filter variables
    private IEnumerable<Department> selectedDepartments = new List<Department>();
    private IEnumerable<Location> selectedLocations = new List<Location>();
    private IEnumerable<User> selectedEducationalConsultants = new List<User>();
    private IEnumerable<User> selectedOperationCoordinators = new List<User>();

    // Filters persons based on filters are applied to update table.
    private IEnumerable<Person> filteredPersons => persons
    .Where(p =>
        (!selectedDepartments.Any() || selectedDepartments.Any(d => d.DepartmentId == p.DepartmentId)) &&
        (!selectedLocations.Any() || selectedLocations.Any(l => l.LocationId == p.LocationId)) &&
        (!selectedOperationCoordinators.Any() || selectedOperationCoordinators.Any(oc => oc.UserId == p.OperationCoordinatorId)) &&
        (!selectedEducationalConsultants.Any() || selectedEducationalConsultants.Any(ec => ec.UserId == p.EducationalConsultantId))
    );

    // Load needed data when entering page.
    protected override async Task OnInitializedAsync()
    {
        persons = await personService.GetPersonsAsync();
        departments = await departmentService.GetDepartmentsAsync();
        locations = await locationService.GetLocationsAsync();
        users = await userService.GetUsersAsync();
        personService.ComputeEndDateStyles(persons);
    }

    // Filter function to allow searching for Person properties in GenericDataTable component.
    private bool FilterFunc(Person item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return item.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    // Methods below accept values from the filter EventCallbacks
    private void OnDepartmentsChanged(IEnumerable<Department> departments)
    {
        selectedDepartments = departments;
    }

    private void OnLocationsChanged(IEnumerable<Location> locations)
    {
        selectedLocations = locations;
    }

    private void OnOperationCoordinatorsChanged(IEnumerable<User> operationCoordinators)
    {
        selectedOperationCoordinators = operationCoordinators;
    }

    private void OnEducationalConsultantsChanged(IEnumerable<User> educationalConsultants)
    {
        selectedEducationalConsultants = educationalConsultants;
    }
}
