@page "/kurser-modul"

@using System.Globalization
@inject IPersonService personService
@inject IDepartmentService departmentService
@inject ILocationService locationService
@inject IUserService userService
@inject IModuleService moduleService
@inject ICourseService courseService
@inject IExcelFromModule excelFromModule
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles =
    nameof(UserRole.Driftskoordinator) + "," +
    nameof(UserRole.Pædagogisk_konsulent) + "," +
    nameof(UserRole.Uddannelseschef) + "," +
    nameof(UserRole.Uddannelsesleder) + "," +
    nameof(UserRole.Human_Resources) + "," +
    nameof(UserRole.Administrator))]



<MudContainer Class="mt-8 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="6" md="GetTableWidth()" Style="padding: 0;">
            <GenericDataTable Height="calc(100vh - 220px)" TItem="Module" Items="@modules" TableTitle="Muduler" OnRowClick="GetCoursesByModuleIdOnClick">
                <HeaderTemplate>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Module, object>(x => x.Name)">Navn</MudTableSortLabel></MudTh>
                </HeaderTemplate>
                <RowTemplate Context="module">
                    <MudTd>@module.Name</MudTd>
                </RowTemplate>
                <ChildRowTemplate Context="moduleDetail">
                    @if (moduleDetail.ModuleId == moduleId)
                    {
                        <MudTr>
                            <td>
                                <GenericDataTable TItem="Course" Items="@filteredCourses" TableTitle="Curser" OnRowClick="GetPersonsByCourseIdOnClick">
                                    <HeaderTemplate>
                                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Course, object>(x => x.CourseNumber)">Kursus Nummer</MudTableSortLabel></MudTh>
                                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Course, object>(x => x.StartDate)">Start Dato</MudTableSortLabel></MudTh>
                                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Course, object>(x => x.EndDate)">Slut Dato</MudTableSortLabel></MudTh>
                                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Course, object>(x => x.CourseType)">Type</MudTableSortLabel></MudTh>
                                    </HeaderTemplate>
                                    <RowTemplate Context="course">
                                        <MudTd>@course.CourseNumber</MudTd>
                                        <MudTd>@course.StartDate.ToShortDateString()</MudTd>
                                        <MudTd>@course.EndDate.ToShortDateString()</MudTd>
                                        <MudTd>@course.CourseType</MudTd>
                                    </RowTemplate>
                                </GenericDataTable>
                            </td>
                        </MudTr>
                    }
                </ChildRowTemplate>
            </GenericDataTable>>
        </MudItem>
        @if (courseId is not 0)
        {
            <MudItem xs="12" sm="6" md="6" Style="padding: 0;">
                <GenericDataTable Filter="TeacherFilterFunc" Height="calc(100vh - 200px)" TItem="Person" Items="@filteredPersons" TableTitle="Undervisere">
                    <HeaderTemplate>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.Name)">Navn</MudTableSortLabel></MudTh>
                        <MudTh Style="max-width: 77px"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.Initials)">Initialer</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.Department?.Name!)">Afdeling</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.Location?.Name!)">Lokation</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.EndDate)">Slut dato</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.PersonCourses[courseId].Status)">Kursus status</MudTableSortLabel></MudTh>
                    </HeaderTemplate>
                    <RowTemplate Context="person">
                        <MudTd Style="min-width:200px max-width: 200px" title="@person.Name">
                            @person.Name
                        </MudTd>
                        <MudTd>@person.Initials</MudTd>
                        <MudTd Style="max-width: 250px" Class="truncate-text">@person.Department?.Name</MudTd>
                        <MudTd>@person.Location?.Name</MudTd>
                        <MudTd Style="@person.EndDateStyle">
                            @person.EndDate.ToShortDateString()
                        </MudTd>
                        <MudTd>
                            @person.PersonCourses.Where(x => x.CourseId == courseId).FirstOrDefault()?.Status.ToString().Replace('_', ' ')
                        </MudTd>
                    </RowTemplate>
                </GenericDataTable>
            </MudItem>
        }
        <MudItem xs="2" sm="2" md="2" Style="padding: 0;">
            <MudPaper Elevation="2" Class="pa-4">
                <FilterComponent ShowCourseTypeFilter="true"
                                 ShowDepartmentFilter="courseId != 0"
                                 ShowLocationFilter="courseId != 0"
                                 ShowStatusFilter="courseId != 0"
                                 Departments="departments"
                                 Locations="locations"
                                 SelectedDepartmentsChanged="OnDepartmentsChanged"
                                 SelectedLocationsChanged="OnLocationsChanged"
                                 SelectedCourseTypesChanged="OnCourseTypeChange"
                                 SelectedStatusesChanged="OnStatusChange" />
            </MudPaper>
            <MudPaper Elevation="2" Class="pa-4">
                <MudMenu Label="Expoter til Excel" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Style="display: flex; justify-content: center;">
                    <MudMenuItem OnClick="ExportModulesToExcel">Eksporter alle moduler til Excel</MudMenuItem>
                    @if (moduleId != 0)
                    {
                        <MudMenuItem OnClick="ExportSelectedModuleTExcel">Eksporter valgte modul til Excel</MudMenuItem>
                    }
                    @if (courseId != 0)
                    {
                        <MudMenuItem OnClick="ExportSelectedCourseToExcel">Eksporter valgte kursus til Excel</MudMenuItem>
                    }
                </MudMenu>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private int courseId = 0;
    private int moduleId = 0;

    private List<Course> courses = new List<Course>();
    private List<Department> departments = new List<Department>();
    private List<Location> locations = new List<Location>();
    private List<Module> modules = new List<Module>();
    private List<Person> persons = new List<Person>();
    private List<User> users = new List<User>();

    private Module selectedModule = new Module();

    // Filter variables
    private IEnumerable<CourseType?> selectedCourseTypes = new List<CourseType?>();
    private IEnumerable<Status?> selectedStatuses = new List<Status?>();
    private IEnumerable<Department> selectedDepartments = new List<Department>();
    private IEnumerable<Location> selectedLocations = new List<Location>();
    private IEnumerable<User> selectedEducationalConsultants = new List<User>();
    private IEnumerable<User> selectedOperationCoordinators = new List<User>();

    // Filters persons based on filters are applied to update table.
    private IEnumerable<Person> filteredPersons => persons
    .Where(p =>
        (!selectedDepartments.Any() || selectedDepartments.Any(d => d.DepartmentId == p.DepartmentId)) &&
        (!selectedLocations.Any() || selectedLocations.Any(l => l.LocationId == p.LocationId)) &&
        (!selectedStatuses.Any() || selectedStatuses.Contains((Status)p.PersonCourses.FirstOrDefault(pc => pc.CourseId == courseId).Status))

    );

    // Filters persons based on filters are applied to update table.
    private IEnumerable<Course> filteredCourses => courses
    .Where(p =>
        (!selectedCourseTypes.Any() || selectedCourseTypes.Contains((CourseType)p.CourseType))
    );

    // Filter function to allow searching for Person properties in GenericDataTable component.
    private bool TeacherFilterFunc(Person item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return item.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    private async Task ExportModulesToExcel()
    {
        var fileBytes = await excelFromModule.GenerateModuleExcelAsync(await moduleService.GetModulesWithCoursesAsync());
        var fileName = "Eksport.xlsx";
        await DownloadFile(fileName, fileBytes);
    }

    private async Task ExportSelectedModuleTExcel()
    {
        var fileBytes = await excelFromModule.GenerateModuleExcelAsync(await moduleService.GetModuleWithCoursesAsync(moduleId));
        var fileName = "Eksport.xlsx";
        await DownloadFile(fileName, fileBytes);
    }

    private async Task ExportSelectedCourseToExcel()
    {
        var fileBytes = await excelFromModule.GenerateCourseExcelAsync(await courseService.GetSelctedCourse(courseId));
        var fileName = "Eksport.xlsx";
        await DownloadFile(fileName, fileBytes);
    }

    private async Task DownloadFile(string fileName, byte[] fileData)
    {
        var fileContent = Convert.ToBase64String(fileData);
        await JS.InvokeVoidAsync("downloadFile", fileName, fileContent);
    }

    private async Task GetCoursesByModuleIdOnClick(Module module)
    {
        if (module == null)
        {
            return;
        }
        if (moduleId != module.ModuleId)
        {
            moduleId = module.ModuleId;
            courses = await courseService.GetCoursesByModuleAsync(moduleId);
        }
        else
        {
            moduleId = 0;
        }
    }

    private async Task GetPersonsByCourseIdOnClick(Course course)
    {
        if (course == null)
        {
            return;
        }
        if (courseId != course.CourseId)
        {
            courseId = course.CourseId;
            persons = await personService.GetPersonsByCourseIdAsync(course.CourseId);
        }
        else
        {
            courseId = 0;
        }
        Console.WriteLine(courseId);
    }

    // Load needed data when entering page.
    protected override async Task OnInitializedAsync()
    {
        modules = await moduleService.GetModulesAsync();
        departments = await departmentService.GetDepartmentsAsync();
        locations = await locationService.GetLocationsAsync();
    }

    // Methods for the table appearance and functionality
    private int GetTableWidth()
    {
        return courseId is not 0 ? 4 : 10;
    }

    // Methods below accept values from the filter EventCallbacks
    private void OnDepartmentsChanged(IEnumerable<Department> departments)
    {
        selectedDepartments = departments;
    }

    private void OnLocationsChanged(IEnumerable<Location> locations)
    {
        selectedLocations = locations;
    }

    private void OnCourseTypeChange(IEnumerable<CourseType?> courseTypes)
    {
        selectedCourseTypes = courseTypes;
    }

    private void OnStatusChange(IEnumerable<Status?> statuses)
    {
        selectedStatuses = statuses;
    }
}
