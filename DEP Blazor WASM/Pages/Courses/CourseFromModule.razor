@using System.Globalization
@inject IPersonService personService
@inject IDepartmentService departmentService
@inject ILocationService locationService
@inject IUserService userService
@inject IModuleService moduleService
@inject ICourseService courseService

<MudContainer Class="mt-8 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="4" md="4" Style="padding: 0;">
            <MudItem Style="max-height:100vh-200">


            <MudExpansionPanels>
                @foreach (var module in modules)
                {
                    <MudExpansionPanel Text="@($"{module.Name}")" ExpandedChanged="@(newVal => OnExpandedChange(newVal, module.ModuleId))">
                        <MudTable Items="filteredCourses" OnRowClick="GetPersonsByCourseIdOnClick" T="Course">
                            <HeaderContent>
                                <MudTh>Start Dato</MudTh>
                                <MudTh>Slut Dato</MudTh>
                                <MudTh>Type</MudTh>
                            </HeaderContent>
                            <RowTemplate Context="course" >
                                <MudTd>@course.StartDate.ToShortDateString()</MudTd>
                                <MudTd>@course.EndDate.ToShortDateString()</MudTd>
                                <MudTd>@course.CourseType</MudTd>
                            </RowTemplate>
                        </MudTable>                        
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
            </MudItem>
        </MudItem>
        <MudItem xs="12" sm="6" md="6" Style="padding: 0;">
            <GenericDataTable Height="calc(100vh - 200px)" TItem="Person" Items="@filteredPersons" TableTitle="Undervisere">
                <HeaderTemplate>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.Name)">Navn</MudTableSortLabel></MudTh>
                    <MudTh Style="max-width: 77px"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.Initials)">Initialer</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.Department?.Name!)">Afdeling</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.Location?.Name!)">Lokation</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.EndDate)">Slut dato</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.PersonCourses[courseId].Status)">Status</MudTableSortLabel></MudTh>
                </HeaderTemplate>
                <RowTemplate Context="person">
                    <MudTd Style="min-width:200px max-width: 200px" Class="cursor-pointer" title="@person.Name"
                    @onclick="@(() => NavigationManager.NavigateTo($"/undervisere/profil/{person.PersonId}"))">
                        @person.Name
                    </MudTd>
                    <MudTd>@person.Initials</MudTd>
                    <MudTd Style="max-width: 250px" Class="truncate-text">@person.Department?.Name</MudTd>
                    <MudTd>@person.Location?.Name</MudTd>
                    <MudTd Style="@person.EndDateStyle">
                        @person.EndDate.ToShortDateString()
                    </MudTd>
                    <MudTd >
                        @person.PersonCourses.Where(x => x.CourseId == courseId).FirstOrDefault()?.Status.ToString().Replace('_', ' ')
                    </MudTd>
                </RowTemplate>
            </GenericDataTable>
        </MudItem>
        <MudItem xs="2" sm="2" md="2" Style="padding: 0;">
            <MudPaper Elevation="2" Class="pa-4">
                <FilterComponent 
                ShowCourseTypeFilter="true"
                ShowSecondViewSwitch="true"
                ShowDepartmentFilter="true"
                ShowLocationFilter="true"
                Departments="departments"
                Locations="locations"
                SelectedDepartmentsChanged="OnDepartmentsChanged"
                SelectedLocationsChanged="OnLocationsChanged"
                SelectedCourseTypesChanged="OnCourseTypeChange"
                SecondViewSelectionChanged="OnViewSelectionChanged" />
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    [Parameter] public EventCallback<bool> SecondViewSelectionChanged { get; set; }

    private int courseId = 0;

    private List<Course> courses = new List<Course>();
    private List<Department> departments = new List<Department>();
    private List<Location> locations = new List<Location>();
    private List<Module> modules = new List<Module>();
    private List<Person> persons = new List<Person>();
    private List<User> users = new List<User>();

    private Module selectedModule = new Module();

    // Filter variables
    private IEnumerable<CourseType?> selectedCourseTypes = new List<CourseType?>();
    private IEnumerable<Department> selectedDepartments = new List<Department>();
    private IEnumerable<Location> selectedLocations = new List<Location>();
    private IEnumerable<User> selectedEducationalConsultants = new List<User>();
    private IEnumerable<User> selectedOperationCoordinators = new List<User>();

    // Filters persons based on filters are applied to update table.
    private IEnumerable<Person> filteredPersons => persons
    .Where(p =>
        (!selectedDepartments.Any() || selectedDepartments.Any(d => d.DepartmentId == p.DepartmentId)) &&
        (!selectedLocations.Any() || selectedLocations.Any(l => l.LocationId == p.LocationId)) &&
        (!selectedOperationCoordinators.Any() || selectedOperationCoordinators.Any(oc => oc.UserId == p.OperationCoordinatorId)) &&
        (!selectedEducationalConsultants.Any() || selectedEducationalConsultants.Any(ec => ec.UserId == p.EducationalConsultantId))
    );

    // Filters persons based on filters are applied to update table.
    private IEnumerable<Course> filteredCourses => courses
    .Where(p =>
        (!selectedCourseTypes.Any() || selectedCourseTypes.Contains((CourseType)p.CourseType))
    );

    // Methods below accept values from the filter EventCallbacks
    private async Task OnViewSelectionChanged(bool ViewChanged)
    {
        await SecondViewSelectionChanged.InvokeAsync(ViewChanged);
    }

    private async void OnExpandedChange(bool newVal, int id)
    {
        if (newVal){
            Console.WriteLine(newVal);
            Console.WriteLine(id);
            courses = await courseService.GetCoursesByModuleAsync(id);
            Console.WriteLine(courses);
        }
    }

    private async Task GetPersonsByCourseIdOnClick(TableRowClickEventArgs<Course> e)
    {
        courseId = e.Item.CourseId;
        persons = await personService.GetPersonsByCourseIdAsync(courseId);
        Console.WriteLine(persons);
    }

    // Load needed data when entering page.
    protected override async Task OnInitializedAsync()
    {
        modules = await moduleService.GetModulesAsync();
    }

    // // Filter function to allow searching for Person properties in GenericDataTable component.
    // private bool FilterFunc(Course item, string searchString)
    // {
    //     if (string.IsNullOrWhiteSpace(searchString))
    //         return true;
    //     return item..Contains(searchString, StringComparison.OrdinalIgnoreCase);
    // }

    // Methods below accept values from the filter EventCallbacks
    private void OnDepartmentsChanged(IEnumerable<Department> departments)
    {
        selectedDepartments = departments;
    }

    private void OnLocationsChanged(IEnumerable<Location> locations)
    {
        selectedLocations = locations;
    }

    private void OnOperationCoordinatorsChanged(IEnumerable<User> operationCoordinators)
    {
        selectedOperationCoordinators = operationCoordinators;
    }

    private void OnEducationalConsultantsChanged(IEnumerable<User> educationalConsultants)
    {
        selectedEducationalConsultants = educationalConsultants;
    }

    private void OnCourseTypeChange(IEnumerable<CourseType?> courseTypes)
    {
        selectedCourseTypes = courseTypes;
    }
}
