@page "/kurser-leder"

@using System.Globalization
@inject IPersonService personService
@inject IDepartmentService departmentService
@inject ILocationService locationService
@inject IUserService userService
@inject IModuleService moduleService
@inject ICourseService courseService
@inject IPersonCourseService personCourseService
@inject IExcelFromBoss excelFromBoss
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles =
    nameof(UserRole.Driftskoordinator) + "," +
    nameof(UserRole.Pædagogisk_konsulent) + "," +
    nameof(UserRole.Uddannelseschef) + "," +
    nameof(UserRole.Uddannelsesleder) + "," +
    nameof(UserRole.Human_Resources) + "," +
    nameof(UserRole.Administrator))]


<MudContainer Class="mt-8 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="6" md="GetTableWidth()" Style="padding: 0;">
            <GenericDataTable Height="calc(100vh - 220px)" TItem="EducationalBossViewModel" Filter="BossFilterFunc" Items="@educationBosses" TableTitle="Uddanelseschefer" OnRowClick="GetLeaderByBossIdOnClick">
                <HeaderTemplate>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<EducationalBossViewModel, object>(x => x.Name)">Navn</MudTableSortLabel></MudTh>
                </HeaderTemplate>
                <RowTemplate Context="boss">
                    <MudTd onclick="() => GetTeacherByLeaderIdOnClick(boss)">@boss.Name</MudTd>
                </RowTemplate>
                <ChildRowTemplate Context="bossDetail">
                    @if (bossDetail.UserId == bossId)
                    {
                        <MudTr>
                            <td>
                                <GenericDataTable TItem="User" Filter="LeaderFilterFunc" Items="@educationLeaders" TableTitle="Uddanelsesledere" OnRowClick="GetTeacherByLeaderIdOnClick">
                                    <HeaderTemplate>
                                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<User, object>(x => x.Name)">Navn</MudTableSortLabel></MudTh>
                                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<User, object>(x => x.Department?.Name!)">Afdeling</MudTableSortLabel></MudTh>
                                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<User, object>(x => x.Location?.Name!)">Lokation</MudTableSortLabel></MudTh>
                                    </HeaderTemplate>
                                    <RowTemplate Context="leader">
                                        <MudTd>@leader.Name</MudTd>
                                        <MudTd>@leader.Department?.Name</MudTd>
                                        <MudTd>@leader.Location?.Name</MudTd>
                                    </RowTemplate>
                                </GenericDataTable>
                            </td>
                        </MudTr>
                    }
                </ChildRowTemplate>
            </GenericDataTable>
        </MudItem>
        @if (leaderId != 0)
        {
            <MudItem xs="12" sm="3" md="5" Style="padding: 0; padding-inline: 0px;">
                <GenericDataTable Height="calc(100vh - 220px)" TItem="Person" Filter="TeacherFilterFunc" Items="@filteredPersons" TableTitle="Undervisere" OnRowClick="GetCoursesByTeacherIdOnClick">
                    <HeaderTemplate>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.Name)">Navn</MudTableSortLabel></MudTh>
                        <MudTh Style="max-width: 77px"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.Initials)">Initialer</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.Department?.Name!)">Afdeling</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.Location?.Name!)">Lokation</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Person, object>(x => x.EndDate)">Slut dato</MudTableSortLabel></MudTh>

                    </HeaderTemplate>
                    <RowTemplate Context="person">
                        <MudTd>
                            @person.Name
                        </MudTd>
                        <MudTd>@person.Initials</MudTd>
                        <MudTd Style="max-width: 250px" Class="truncate-text">@person.Department?.Name</MudTd>
                        <MudTd>@person.Location?.Name</MudTd>
                        <MudTd Style="@person.EndDateStyle">
                            @person.EndDate.ToShortDateString()
                        </MudTd>
                    </RowTemplate>
                    <ChildRowTemplate Context="personDetail">
                        @if (personDetail.PersonId == teacherId)
                        {
                            <MudTr>
                                <td colspan="5">
                                    <GenericDataTable TItem="PersonCourse" EnableSearch="false" Items="@filteredPersonCourses" TableTitle="Kurser">
                                        <HeaderTemplate>
                                            <MudTh style="padding-inline: 3px; padding: 10px;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<PersonCourse, object>(x => x.Course!.Module!.Name)">Navn</MudTableSortLabel></MudTh>
                                            <MudTh style="padding-inline: 3px;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<PersonCourse, object>(x => x.Course!.StartDate)">Start dato</MudTableSortLabel></MudTh>
                                            <MudTh style="padding-inline: 3px;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<PersonCourse, object>(x => x.Course!.EndDate)">Slut dato</MudTableSortLabel></MudTh>
                                            <MudTh style="padding-inline: 3px;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<PersonCourse, object>(x => x.Course!.CourseType)">CourseType</MudTableSortLabel></MudTh>
                                            <MudTh style="padding-inline: 3px;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<PersonCourse, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
                                        </HeaderTemplate>
                                        <RowTemplate>
                                            <MudTd style="padding: 5px; ">@context.Course?.Module?.Name</MudTd>
                                            <MudTd style="padding: 5px;">@context.Course?.StartDate.ToShortDateString()</MudTd>
                                            <MudTd style="padding: 5px;">@context.Course?.EndDate.ToShortDateString()</MudTd>
                                            <MudTd style="padding: 5px;">@context.Course?.CourseType.ToString().Replace('_', ' ')</MudTd>
                                            <MudTd style="padding: 5px;">@context.Status.ToString().Replace('_', ' ')</MudTd>
                                        </RowTemplate>
                                    </GenericDataTable>
                                </td>
                            </MudTr>
                        }
                    </ChildRowTemplate>

                </GenericDataTable>
            </MudItem>
        }
        <MudItem xs="2" sm="2" md="2" Style="padding: 0;">
            <MudPaper Elevation="2" Class="pa-4">
                <FilterComponent ShowDepartmentFilter="true"
                ShowLocationFilter="true"
                ShowCourseTypeFilter="teacherId != 0"
                ShowStatusFilter="teacherId != 0"
                Departments="departments"
                Locations="locations"
                SelectedDepartmentsChanged="OnDepartmentsChanged"
                SelectedLocationsChanged="OnLocationsChanged"
                SelectedCourseTypesChanged="OnCourseTypeChange"
                SelectedStatusesChanged="OnStatusChange" />
            </MudPaper>
            <MudPaper Elevation="2" Class="pa-4">
                <MudMenu Label="Eksporter til Excel" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Style="display: flex; justify-content: center;">
                    <MudMenuItem OnClick="ExportBossesToExcel">Eksporter alle uddanelseschefer til Excel</MudMenuItem>
                    @if (bossId != 0)
                    {
                        <MudMenuItem OnClick="ExportSelectedBossTExcel">Eksporter valgte uddanelseschefer til Excel</MudMenuItem>
                    }
                    @if (leaderId != 0)
                    {
                        <MudMenuItem OnClick="ExportSelectedLeaderToExcel">Eksporter valgte uddanelsesleder til Excel</MudMenuItem>
                    }
                    @if (teacherId != 0)
                    {
                        <MudMenuItem OnClick="ExportSelectedTeacherToExcel">Eksporter valgte underviser til Excel</MudMenuItem>
                    }
                </MudMenu>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private int bossId = 0;
    private int leaderId = 0;
    private int teacherId = 0;

    private List<Department> departments = new List<Department>();
    private List<Location> locations = new List<Location>();
    private List<Module> modules = new List<Module>();
    private List<Person> persons = new List<Person>();
    private List<PersonCourse> personsCourses = new List<PersonCourse>();
    private List<User> users = new List<User>();
    private List<EducationalBossViewModel> educationBosses = new List<EducationalBossViewModel>();
    private List<User> educationalConsultants = new List<User>();
    private List<User> educationLeaders = new List<User>();

    private Module selectedModule = new Module();

    // Filter variables
    private IEnumerable<CourseType?> selectedCourseTypes = new List<CourseType?>();
    private IEnumerable<Status?> selectedStatuses = new List<Status?>();
    private IEnumerable<Department> selectedDepartments = new List<Department>();
    private IEnumerable<Location> selectedLocations = new List<Location>();
    private IEnumerable<User> selectedEducationBosses = new List<User>();

    // Filters persons based on filters are applied to update table.
    private IEnumerable<Person> filteredPersons => persons
    .Where(p =>
        (!selectedDepartments.Any() || selectedDepartments.Any(d => d.DepartmentId == p.DepartmentId)) &&
        (!selectedLocations.Any() || selectedLocations.Any(l => l.LocationId == p.LocationId))

    );

    // Filters personcourses based on filters are applied to update table.
    private IEnumerable<PersonCourse> filteredPersonCourses => personsCourses
    .Where(pc =>
        (!selectedStatuses.Any() || selectedStatuses.Contains((Status)pc.Status)) &&
        (!selectedCourseTypes.Any() || selectedCourseTypes.Contains((CourseType)pc.Course!.CourseType))
    );

    private async Task ExportBossesToExcel()
    {
        var fileBytes = await excelFromBoss.GenerateBossExcelAsync(await userService.GetEducationalBossesAsync());
        var fileName = "Eksport.xlsx";
        await DownloadFile(fileName, fileBytes);
    }

    private async Task ExportSelectedBossTExcel()
    {
        var fileBytes = await excelFromBoss.GenerateBossExcelAsync(await userService.GetEducationalBossAsync(bossId));
        var fileName = "Eksport.xlsx";
        await DownloadFile(fileName, fileBytes);
    }

    private async Task ExportSelectedLeaderToExcel()
    {
        var fileBytes = await excelFromBoss.GenerateLeaderExcelAsync(await userService.GetEducationalLeaderAsync(leaderId));
        var fileName = "Eksport.xlsx";
        await DownloadFile(fileName, fileBytes);
    }

    private async Task ExportSelectedTeacherToExcel()
    {
        var fileBytes = await excelFromBoss.GenerateTeacherExcelAsync(await personService.GetPersonExcelAsync(teacherId));
        var fileName = "Eksport.xlsx";
        await DownloadFile(fileName, fileBytes);
    }

    private async Task DownloadFile(string fileName, byte[] fileData)
    {
        var fileContent = Convert.ToBase64String(fileData);
        await JS.InvokeVoidAsync("downloadFile", fileName, fileContent);
    }

    private async Task GetLeaderByBossIdOnClick(EducationalBossViewModel boss)
    {
        if (boss == null)
        {
            return;
        }
        if (bossId != boss.UserId)
        {
            educationLeaders = await userService.GetUsersByEducationBossId(boss.UserId);
            bossId = boss.UserId;
        }
        else
        {
            bossId = 0;
        }
    }

    private async Task GetTeacherByLeaderIdOnClick(User leader)
    {
        if (leader == null)
        {
            return;
        }
        if (leaderId != leader.UserId)
        {
            // persons = await personService.GetPersonsByCourseIdAsync(leader.UserId);
            persons = await personService.GetPersonsExcelAsync(leader.UserId);
            leaderId = leader.UserId;
            Console.WriteLine(persons);
        }
        else
        {
            leaderId = 0;
        }
    }

    private async Task GetCoursesByTeacherIdOnClick(Person person)
    {
        if (person == null)
        {
            return;
        }
        if (teacherId != person.PersonId)
        {
            personsCourses = await personCourseService.GetAllPersonCoursesForPersonAsync(person.PersonId);
            teacherId = person.PersonId;
            Console.WriteLine(persons);
        }
        else
        {
            teacherId = 0;
        }
    }

    // Load needed data when entering page.
    protected override async Task OnInitializedAsync()
    {
        educationBosses = await userService.GetEducationalBossesAsync();
        departments = await departmentService.GetDepartmentsAsync();
        locations = await locationService.GetLocationsAsync();
    }

    // Methods for the table appearance and functionality
    private int GetTableWidth()
    {
        return leaderId is not 0 ? 5 : 10;
    }

    // Filter function to allow searching for EducationalBossViewModel properties in GenericDataTable component.
    private bool BossFilterFunc(EducationalBossViewModel item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return item.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    // Filter function to allow searching for EducationalLeaderViewModel properties in GenericDataTable component.
    private bool LeaderFilterFunc(User item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return item.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    // Filter function to allow searching for Person properties in GenericDataTable component.
    private bool TeacherFilterFunc(Person item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return item.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    // Methods below accept values from the filter EventCallbacks
    private void OnDepartmentsChanged(IEnumerable<Department> departments)
    {
        selectedDepartments = departments;
    }

    private void OnLocationsChanged(IEnumerable<Location> locations)
    {
        selectedLocations = locations;
    }

    private void OnCourseTypeChange(IEnumerable<CourseType?> courseTypes)
    {
        selectedCourseTypes = courseTypes;
    }

    private void OnStatusChange(IEnumerable<Status?> statuses)
    {
        selectedStatuses = statuses;
    }

}
