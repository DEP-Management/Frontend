@using System.Security.Claims
@inject IAuthService authService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject UserSessionService Session

<MudNavMenu>
	<MudNavLink Href="/" Match="NavLinkMatch.All">Dashboard</MudNavLink>
	@if (undervisereRoles.Contains(Session.CurrentUserRole!.Value))
	{
		<MudNavLink Href="/undervisere" Match="NavLinkMatch.Prefix">Undervisere</MudNavLink>
	}
	@if (filerRoles.Contains(Session.CurrentUserRole!.Value))
	{
		<MudNavLink Href="/filer" Match="NavLinkMatch.Prefix">Filer</MudNavLink>
	}
	@if (statisticRoles.Contains(Session.CurrentUserRole!.Value))
	{
		<MudNavLink Href="/statistik" Match="NavLinkMatch.Prefix">Statistik</MudNavLink>
	}
	@if (booksRoles.Contains(Session.CurrentUserRole!.Value))
	{
		<MudNavLink Href="/books" Match="NavLinkMatch.Prefix">Bøger</MudNavLink>
	}
	@if (kurserRoles.Contains(Session.CurrentUserRole!.Value))
	{
		<MudNavGroup Title="Kurser" Expanded="false">
			<MudNavLink Href="/kurser-modul" Match="NavLinkMatch.Prefix">Kurser fra moduler</MudNavLink>
			<MudNavLink Href="/Kurser-leder" Match="NavLinkMatch.Prefix">Kurser fra ledere</MudNavLink>
		</MudNavGroup>
	}
	@if (adminRoles.Contains(Session.CurrentUserRole!.Value))
	{
		<MudNavGroup Title="Administration" Expanded="false">
			<MudNavLink Href="/admin-opret" Match="NavLinkMatch.Prefix">Opret</MudNavLink>
			<MudNavLink Href="/admin-rediger" Match="NavLinkMatch.Prefix">Rediger</MudNavLink>
		</MudNavGroup>
	}
	<MudNavGroup Title="Indstillinger" Expanded="false">
		<MudNavLink OnClick="OpenChangePasswordDialog" Match="NavLinkMatch.Prefix">Skift Adgangskode</MudNavLink>
		<MudNavLink OnClick="LogOutAsync" Match="NavLinkMatch.Prefix">Log ud</MudNavLink>
	</MudNavGroup>
</MudNavMenu>

@code {
	private List<UserRole> undervisereRoles = new()
	{
		UserRole.Driftskoordinator,
		UserRole.Pædagogisk_konsulent,
		UserRole.Uddannelseschef,
		UserRole.Uddannelsesleder,
		UserRole.Administrator // Fjernes efter eksamen
	};

	private List<UserRole> filerRoles = new()
	{
		UserRole.Driftskoordinator,
		UserRole.Pædagogisk_konsulent,
		UserRole.Uddannelseschef,
		UserRole.Uddannelsesleder,
		UserRole.Human_Resources,
		UserRole.Administrator // Fjernes efter eksamen
	};

	private List<UserRole> statisticRoles = new()
	{
		UserRole.Driftskoordinator,
		UserRole.Pædagogisk_konsulent,
		UserRole.Human_Resources,
		UserRole.Administrator // Fjernes efter eksamen
	};

	private List<UserRole> booksRoles = new()
	{
		UserRole.Driftskoordinator,
		UserRole.Pædagogisk_konsulent,
		UserRole.Administrator // Fjernes efter eksamen
	};

	private List<UserRole> kurserRoles = new()
	{
		UserRole.Driftskoordinator,
		UserRole.Pædagogisk_konsulent,
		UserRole.Uddannelseschef,
		UserRole.Uddannelsesleder,
		UserRole.Human_Resources,
		UserRole.Administrator // Fjernes efter eksamen
	};

	private List<UserRole> adminRoles = new()
	{
		UserRole.Driftskoordinator,
		UserRole.Pædagogisk_konsulent,
		UserRole.Controller,
		UserRole.Administrator
	};

	private async Task LogOutAsync()
	{
		var parameters = new DialogParameters<ConfirmationDialog>
	{
		{ x => x.ContentText, "Er du sikker på at du vil logge ud?" },
		{ x => x.ButtonText, "Log ud" },
		{ x => x.Color, Color.Primary }
	};

		var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Log ud?", parameters);
		var result = await dialog.Result;

		if (!result.Canceled)
		{
			await authService.LogoutAsync();
			NavigationManager.NavigateTo("/login");
		}
	}

	private async Task OpenChangePasswordDialog()
	{
		await DialogService.ShowAsync<ChangePasswordDialog>("Skift Adgangskode");
	}
}