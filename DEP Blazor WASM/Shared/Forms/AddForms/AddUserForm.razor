@inject IDepartmentService DepartmentService
@inject ILocationService LocationService
@inject IUserService UserService
@inject ISnackbar Snackbar

<MudCard Class="pa-4 mb-4" Elevation="0">
    <MudForm Model="NewUser" @ref="form" @bind-IsValid="@success">
        <MudGrid Spacing="2" Class="px-2">

            <!-- Personal Information -->
            <MudItem xs="12">
                <MudText Typo="Typo.subtitle2">Personlige Oplysninger</MudText>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudTextField InputType="InputType.Text" Label="Brugernavn"
                              Variant="Variant.Outlined"
                              @bind-Value="NewUser.Username"
                              Required
                              RequiredError="Brugernavn er påkrævet" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudTextField InputType="InputType.Text" Label="Navn"
                              Variant="Variant.Outlined"
                              @bind-Value="NewUser.Name"
                              Required
                              RequiredError="Navn er påkrævet" />
            </MudItem>

            <!-- Organizational Details -->
            <MudItem xs="12">
                <MudText Typo="Typo.subtitle2">Organisatoriske Oplysninger</MudText>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudSelect T="int?" Label="Afdeling" Variant="Variant.Outlined"
                           @bind-Value="NewUser.DepartmentId" Clearable>
                    @foreach (var dep in Departments)
                    {
                        <MudSelectItem T="int?" Value="dep.DepartmentId">@dep.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudSelect T="int?" Label="Lokation" Variant="Variant.Outlined"
                           @bind-Value="NewUser.LocationId" Clearable>
                    @foreach (var location in Locations)
                    {
                        <MudSelectItem T="int?" Value="location.LocationId">@location.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <!-- Administrative Association -->
            <MudItem xs="12">
                <MudText Typo="Typo.subtitle2">Administrativ Tilknytning</MudText>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudSelect T="UserRole" Label="Brugerrolle" Variant="Variant.Outlined"
                           Value="NewUser.UserRole" ValueChanged="UserRoleChanged">
                    @foreach (var role in Enum.GetValues<UserRole>())
                    {
                        <MudSelectItem T="UserRole" Value="@role">@role.ToString().Replace('_', ' ')</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            @if (EducationLeaderSelected)
            {
                <MudItem xs="12" md="6">
                    <MudSelect T="int?" Label="Uddannelseschef" Variant="Variant.Outlined"
                               @bind-Value="NewUser.EducationBossId" Clearable>
                        @foreach (var boss in EducationBosses)
                        {
                            <MudSelectItem T="int?" Value="boss.UserId">@boss.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }

            <MudFlexBreak />

            <!-- Submit Button -->
            <MudItem xs="12">
                <MudCardActions Class="d-flex justify-center">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Disabled="@(!success)"
                               OnClick="Submit">
                        Opret
                    </MudButton>
                </MudCardActions>
            </MudItem>

        </MudGrid>
    </MudForm>
</MudCard>

@code {
    private bool success;
    private bool EducationLeaderSelected { get; set; }
    private MudForm form;
    private AddUserRequest NewUser { get; set; } = new();

    // Dropdown data
    private List<Department> Departments { get; set; } = new();
    private List<UserViewModel> EducationBosses { get; set; } = new();
    private List<Location> Locations { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Departments = await DepartmentService.GetDepartmentsAsync();
        EducationBosses = await UserService.GetUsersByUserRoleAsync(UserRole.Uddannelseschef);
        Locations = await LocationService.GetLocationsAsync();
    }

    private void UserRoleChanged(UserRole userRole)
    {
        NewUser.UserRole = userRole;

        if (userRole != UserRole.Uddannelsesleder)
        {
            // Clearing EducationBossId if Uddannelsesleder isn't the selected role
            NewUser.EducationBossId = null;
            EducationLeaderSelected = false;
        }
        else
        {
            EducationLeaderSelected = true;
        }
    }

    private async Task Submit()
    {
        var response = await UserService.AddUserAsync<UserViewModel>(NewUser);

        if (response.Success)
        {
            var newUser = response.Data;
            Snackbar.Add(response.Message, Severity.Success);

            if (newUser?.UserRole == UserRole.Uddannelseschef)
            {
                EducationBosses.Add(newUser);
            }
            await form.ResetAsync();
            NewUser = new AddUserRequest();
        }
        else
        {
            Snackbar.Add(response.Message, Severity.Error);
            Console.WriteLine(response.Message);
        }
    }
}
