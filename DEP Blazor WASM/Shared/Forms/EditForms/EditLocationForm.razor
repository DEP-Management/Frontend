@using System.Reflection

@inject ILocationService LocationService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudGrid Spacing="0">
    @* Table *@
    <MudItem xs="12" md="@GetTableWidth()">
        <GenericDataTable Height="calc(100vh - 236px)"
        TItem="Location"
        Items="@Locations"
        TableTitle="Klik på en lokation"
        Filter="FilterFunc"
        RowsPerPage="20"
        OnRowClick="RowClicked">
            <HeaderTemplate>
                <MudTh>
                    <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Location, object>(x => x.Name)">
                        Navn
                    </MudTableSortLabel>
                </MudTh>
            </HeaderTemplate>
            <RowTemplate Context="location">
                <MudTd Class="cursor-pointer" title="@location.Name">@location.Name</MudTd>
            </RowTemplate>
        </GenericDataTable>
    </MudItem>

    @* Edit form *@
    @if (SelectedLocation is not null)
    {
        <MudItem xs="4" md="4" lg="4" Class="scrollable-tab-container">
            <MudCard Class="pa-4 mb-4" Elevation="0">
                <MudForm Model="EditableLocation" @ref="form" @bind-IsValid="@success">
                    <MudGrid Spacing="2" Class="px-2 d-flex justify-center">
                        <!-- Location Name Input -->
                        <MudItem xs="12" md="8">
                            <MudTextField T="string"
                            Label="Navn"
                            @bind-Value="EditableLocation!.Name"
                            Variant="Variant.Outlined"
                            Immediate="true"
                            Required="true"
                            RequiredError="Navn på lokation er påkrævet."
                            Disabled="!IsEditing" />
                        </MudItem>

                        <!-- Submit Button Row -->
                        <MudItem xs="12">
                            <MudCardActions Class="d-flex justify-space-evenly">
                                @if (!IsEditing)
                                {
                                    <MudButton Variant="Variant.Filled"
                                    Color="Color.Error"
                                    OnClick="DeleteLocation">
                                        Slet
                                    </MudButton>

                                    <MudButton Variant="Variant.Filled"
                                    Color="Color.Primary"
                                    OnClick="EnterEditMode">
                                        Rediger
                                    </MudButton>
                                }
                                else
                                {
                                    <MudButton Variant="Variant.Filled"
                                    Color="Color.Surface"
                                    OnClick="CancelEdit">
                                        Annuller
                                    </MudButton>

                                    <MudButton Variant="Variant.Filled"
                                    Color="Color.Primary"
                                    OnClick="SaveChanges"
                                    Disabled="!success">
                                        Gem
                                    </MudButton>
                                }
                            </MudCardActions>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {
    private bool success;
    private MudForm form = new();

    private bool IsEditing { get; set; } = false;

    private List<Location> Locations { get; set; } = new();
    private Location? SelectedLocation { get; set; }
    private Location? EditableLocation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Locations = await LocationService.GetLocationsAsync();
    }

    private async Task SaveChanges()
    {
        await form.Validate();
        if (!form.IsValid || EditableLocation is null)
        {
            return;
        }

        var result = await LocationService.UpdateLocationAsync(EditableLocation);
        if (result)
        {
            CopyLocationProperties(EditableLocation, SelectedLocation!);
            int index = Locations.FindIndex(d => d.LocationId == EditableLocation.LocationId);
            if (index != -1)
            {
                // Replace the location in the list
                Locations[index] = SelectedLocation!;
            }
                IsEditing = false;
            Snackbar.Add("Lokation opdateret.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Lokationen kunnne ikke opdateres", Severity.Error);
        }
    }

    private async Task DeleteLocation()
    {
        if (SelectedLocation is null || EditableLocation is null)
        {
            return;
        }

        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { x => x.Color, Color.Error },
            { x => x.ContentText, $"Er du sikker på at du vil slette den valgte lokation: {EditableLocation.Name}?" },
            { x => x.ButtonText, "Slet" },
        };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Bemærk!", parameters);
        var dialogResult = await dialog.Result;

        if (dialogResult is null || dialogResult.Canceled)
        {
            return; // User chose to not delete
        }

        bool deleteResult = await LocationService.DeleteLocationAsync(SelectedLocation.LocationId);
        if (deleteResult)
        {
            Locations.RemoveAll(d => d.LocationId == SelectedLocation.LocationId);
            SelectedLocation = null;
            EditableLocation = null;
            StateHasChanged();
            Snackbar.Add("Lokation slettet.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Lokationen kunne ikke slettes", Severity.Error);
        }
    }

    private void EnterEditMode()
    {
        IsEditing = true;
    }

    private void CancelEdit()
    {
        IsEditing = false;

        // Restore original values by re-initializing EditableLocation
        if (SelectedLocation is not null && EditableLocation is not null)
        {
            CopyLocationProperties(SelectedLocation, EditableLocation);
        }

        // Reset validation
        form.ResetValidation();
    }

    private bool CheckUnsavedEdits(Location location1, Location location2)
    {
        return typeof(Location).GetProperties(BindingFlags.Public | BindingFlags.Instance)
            .Any(prop => !Equals(prop.GetValue(location1), prop.GetValue(location2)));
    }


    // Methods for the table appearance and functionality
    private int GetTableWidth()
    {
        return SelectedLocation is not null ? 8 : 12;
    }

    // Filter function to allow searching for properties in GenericDataTable component.
    private bool FilterFunc(Location item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return item.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    private async Task RowClicked(Location location)
    {
        // Check if user is in editmode and has changed any values
        if (IsEditing && EditableLocation != null && CheckUnsavedEdits(EditableLocation, SelectedLocation))
        {
            var parameters = new DialogParameters<ConfirmationDialog>
        {
            { x => x.Color, Color.Error },
            { x => x.ContentText, "Du har ændringer, som ikke er blevet gemt. Vil du opgive de nuværende ændringer og skifte til den valgte lokation?" },
            { x => x.ButtonText, "Skift" },
        };

            var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Bemærk!", parameters);
            var result = await dialog.Result;

            if (result.Canceled)
            {
                return; // User chose to stay, keep the same location.
            }
        }

        if (EditableLocation is null)
        {
            EditableLocation = new Location();
        }

        // Set selected location
        CopyLocationProperties(location, EditableLocation);
        SelectedLocation = location;
        IsEditing = false;  // Reset edit mode after switching
    }

    private void CopyLocationProperties(Location source, Location target)
    {
        target.LocationId = source.LocationId;
        target.Name = source.Name;
    }

}
