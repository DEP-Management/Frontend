@inherits LayoutComponentBase

@inject AppState AppState
@inject NavigationManager NavigationManager
@inject CustomAuthStateProvider AuthStateProvider
@inject IDialogService DialogService
@inject ILocalStorageService LocalStorage
@inject IAuthService AuthService
@inject IUserService UserService

@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <MudThemeProvider Theme="MyCustomTheme" />
        <MudPopoverProvider />
        <MudDialogProvider />
        <MudSnackbarProvider />

        <MudLayout Class="page">
            <main>
                <MudAppBar Elevation="1" Color="Color.Primary">
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                    <MudImage Class="pl-4" Src="images/toolbar-logo-dark.png" Height="64" Width="328" Alt="TEC Logo" ObjectFit="ObjectFit.Fill" />
                    <MudSpacer />
                    <MudText>@CurrentUserNameAndRole</MudText>
                </MudAppBar>
                <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
                    <NavMenu />
                </MudDrawer>
                <MudMainContent>
                    @Body
                </MudMainContent>
            </main>
        </MudLayout>

    </Authorized>
    <NotAuthorized>
        <MudThemeProvider Theme="MyCustomTheme" />
        <MudPopoverProvider />
        <MudDialogProvider />
        <MudSnackbarProvider />
        <div class="page">
            <main>
                <Login />
            </main>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {

    // [CascadingParameter] IModalService Modal { get; set; } = default!;

    bool _drawerOpen = true;
    private string CurrentUserNameAndRole { get; set; } = string.Empty;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInit i MainLayout!");
        // Subscribe to OnLogout and handle logout when user is forcibly logged out through RefreshAsync in AuthService.
        AppState.OnLogout += HandleLogout;

        // Subscribe to OnLogin and begin Dialog opening checks/opening dialog when successfully logged in from login component and setting name and role in appbar
        AppState.OnLogin += ShouldTeacherReminderDialogOpen;
        AppState.OnLogin += SetAppBarNameAndUserRole;

        // Check if dialog should open in case user is already authenticated and bypasses login screen
        await ShouldTeacherReminderDialogOpen();

        // Get Name and UserRole for the appbar
        await SetAppBarNameAndUserRole();
    }

    private async Task HandleLogout()
    {
        var parameters = new DialogParameters<InformationDialog>
    {
        { x => x.ContentText, AppState.LogoutReason ?? "Du er blevet logget ud." },
        { x => x.ButtonText, "Ok" },
        { x => x.Color, Color.Primary }
    };

        var options = new DialogOptions { NoHeader = true };

        var dialog = await DialogService.ShowAsync<InformationDialog>("", parameters, options);
        var result = await dialog.Result;

        NavigationManager.NavigateTo("/login");
    }

    private async Task SetAppBarNameAndUserRole()
    {
        Console.WriteLine("AYO SETAPP CALLED");
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState?.User?.Identity?.IsAuthenticated == false)
        {
            Console.WriteLine("AYO NOT AUTHENTICATED");
            return;
        }
        var currentName = await AuthService.GetCurrentUserName();
        var currentUserRole = await AuthService.GetCurrentUserRole();

        CurrentUserNameAndRole = $"{currentName} | {currentUserRole?.ToString().Replace('_', ' ')}";

        // Required refresh to update UI.
        StateHasChanged();
    }

    private async Task ShouldTeacherReminderDialogOpen()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState?.User?.Identity?.IsAuthenticated == false)
        {
            return;
        }

        if (await ShouldOpenTeacherReminderDialog())
        {
            await ShowDialog();
        }
    }

    private async Task<bool> ShouldOpenTeacherReminderDialog()
    {
        var storedFrequency = await LocalStorage.GetItemAsync<string>("teacherReminderFrequency");
        var lastOpened = await LocalStorage.GetItemAsync<DateTime?>("teacherReminderLastOpened");

        if (!Enum.TryParse(storedFrequency, out ReminderFrequency frequency))
        {
            frequency = ReminderFrequency.Hver_Session; // Default if invalid
        }

        if (frequency == ReminderFrequency.Aldrig)
        {
            return false; // Never show dialog
        }

        if (lastOpened == null || ShouldShowReminder(lastOpened.Value.Date, frequency))
        {
            return true;
        }

        return false;
    }

    private bool ShouldShowReminder(DateTime lastOpened, ReminderFrequency frequency)
    {
        DateTime today = DateTime.UtcNow.Date; // Only the date part
        int daysElapsed = (today - lastOpened).Days; // Compare only the date part
        return frequency switch
        {
            ReminderFrequency.Hver_Session => true,
            ReminderFrequency.Dagligt => daysElapsed >= 1,
            ReminderFrequency.Ugenligt => daysElapsed >= 7,
            ReminderFrequency.Hver_anden_uge => daysElapsed >= 14,
            ReminderFrequency.Månedligt => daysElapsed >= 30,
            _ => false
        };
    }

    private async Task ShowDialog()
    {
        // Get the current user's ID.
        var userId = await AuthService.GetCurrentUserId();
        if (userId is null)
        {
            return;
        }

        // Retrieve the dashboard data for the user.
        var response = await UserService.GetUserDashboardByIdAsync(userId.Value);
        if (!response.Success)
        {
            return;
        }

        // Choose the appropriate list of persons based on the user's role.
        List<PersonViewModel>? personsToShow = response.Data!.UserRole switch
        {
            UserRole.Driftskoordinator => response.Data.OperationCoordinatorPersons,
            UserRole.Uddannelsesleder => response.Data.EducationLeaderPersons,
            UserRole.Pædagogisk_konsulent => response.Data.EducationalConsultantPersons,
            _ => null
        };

        // If the list is null or empty, exit early.
        if (personsToShow is null || !personsToShow.Any())
        {
            return;
        }

        // Check if there are any persons within the selected EndDate range
        if (!await HasPersonsWithinEndDateRange(personsToShow))
        {
            return;
        }

        // wait a moment to ensure UI rendering is complete.
        await Task.Delay(100);

        // Build the dialog parameters.
        var parameters = new DialogParameters<TeacherEndReminderDialog>
        {
            { x => x.Persons, personsToShow }
        };

        var options = new DialogOptions
            {
                FullWidth = true,
                MaxWidth = MaxWidth.Large
            };

        // Show the dialog.
        await DialogService.ShowAsync<TeacherEndReminderDialog>("Bemærk! Undervisere nær deres slut dato", parameters, options);
    }

    private async Task<bool> HasPersonsWithinEndDateRange(List<PersonViewModel> persons)
    {
        // Retrieve TeacherEndDateRange from local storage
        var storedRange = await LocalStorage.GetItemAsync<string>("teacherEndDateRange");
        if (!Enum.TryParse(storedRange, out TeacherEndDateRange endDateRange))
        {
            endDateRange = TeacherEndDateRange.Halvt_år; // Default if invalid
        }

        // Determine the end date threshold
        DateTime thresholdDate = DateTime.UtcNow.AddMonths(endDateRange switch
        {
            TeacherEndDateRange.Halvt_år => 6,
            TeacherEndDateRange.Et_år => 12,
            TeacherEndDateRange.To_år => 24,
            _ => 6 // Default fallback
        });

        // Check if any persons have an EndDate within the selected range
        return persons.Any(p => p.EndDate <= thresholdDate);
    }

    public void Dispose()
    {
        AppState.OnLogout -= HandleLogout;
        AppState.OnLogin -= ShouldTeacherReminderDialogOpen;
    }

    MudTheme MyCustomTheme = new MudTheme()
        {
            PaletteLight = new PaletteLight()
            {
                // Primary = "#006E8C"
                Primary = "#000000"
            },
            PaletteDark = new PaletteDark()
            {
                Primary = "#006E8C"
            }
        };
}